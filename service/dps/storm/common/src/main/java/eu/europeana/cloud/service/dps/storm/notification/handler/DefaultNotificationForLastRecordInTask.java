package eu.europeana.cloud.service.dps.storm.notification.handler;

import com.datastax.driver.core.BoundStatement;
import eu.europeana.cloud.common.model.dps.RecordState;
import eu.europeana.cloud.common.model.dps.TaskState;
import eu.europeana.cloud.service.dps.storm.BatchExecutor;
import eu.europeana.cloud.service.dps.storm.NotificationBolt;
import eu.europeana.cloud.service.dps.storm.NotificationTuple;
import eu.europeana.cloud.service.dps.storm.dao.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;

/**
 * Handles {@link NotificationTuple} that is generated during default records processing.
 * It doesn't contain error notification, just the notification generated by the last one bolt in the processing chain.
 * It also handles record that is the last one record in the task (task status will be changed to PROCESSED);
 */

public class DefaultNotificationForLastRecordInTask extends NotificationTupleHandler {

    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultNotificationForLastRecordInTask.class);

    public DefaultNotificationForLastRecordInTask(ProcessedRecordsDAO processedRecordsDAO,
                                                  TaskDiagnosticInfoDAO taskDiagnosticInfoDAO,
                                                  CassandraSubTaskInfoDAO subTaskInfoDAO,
                                                  CassandraTaskErrorsDAO taskErrorDAO,
                                                  CassandraTaskInfoDAO taskInfoDAO,
                                                  TasksByStateDAO tasksByStateDAO,
                                                  BatchExecutor batchExecutor,
                                                  String topologyName) {
        super(processedRecordsDAO,
                taskDiagnosticInfoDAO,
                subTaskInfoDAO,
                taskErrorDAO,
                taskInfoDAO,
                tasksByStateDAO,
                batchExecutor,
                topologyName);
    }

    @Override
    protected List<BoundStatement> prepareStatementsForTupleContainingError(NotificationTuple notificationTuple, NotificationBolt.NotificationCache nCache) {
        return Collections.emptyList();
    }

    @Override
    protected List<BoundStatement> prepareStatementsForTupleContainingLastRecord(NotificationTuple notificationTuple) {
        return prepareStatementsForTupleContainingLastRecord(notificationTuple, TaskState.PROCESSED, "Completely processed");
    }

    @Override
    protected List<BoundStatement> prepareStatementsForRecordState(NotificationTuple notificationTuple) {
        return prepareStatementsForRecordState(notificationTuple, RecordState.SUCCESS);
    }
}
