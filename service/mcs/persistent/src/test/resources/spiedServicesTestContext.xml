<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mockito="http://www.mockito.org/spring/mockito"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.mockito.org/spring/mockito classpath:spring/mockito.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <!--connection provider - with options the same as in embedded cassandra-->
    <bean id="dbService" class="eu.europeana.cloud.cassandra.CassandraConnectionProvider">
        <constructor-arg index="0" value="localhost" />
        <constructor-arg index="1" value="#{ T(eu.europeana.cloud.test.CassandraTestInstance).getPort() }" />
        <constructor-arg index="2" value="junit_mcs" />
        <constructor-arg index="3" value="" />
        <constructor-arg index="4" value="" />
    </bean>

    <bean id="cassandraDataSetService" class="eu.europeana.cloud.service.mcs.persistent.CassandraDataSetService"/>
    <bean id="cassandraDataSetDAO" class="eu.europeana.cloud.service.mcs.persistent.cassandra.CassandraDataSetDAO"/>

    <bean id="cassandraRecordService" class="eu.europeana.cloud.service.mcs.persistent.CassandraRecordService"/>

    <bean id="cassandraRecordDAO" class="eu.europeana.cloud.service.mcs.persistent.cassandra.CassandraRecordDAO"/>

    <bean id="dynamicContentDAO"
          class="eu.europeana.cloud.service.mcs.persistent.DynamicContentProxy">
        <constructor-arg>
            <map key-type="eu.europeana.cloud.service.mcs.Storage">
                <entry key="OBJECT_STORAGE"  value-ref="s3ContentDAO"/>
                <entry key="DATA_BASE" value-ref="cassandraContentDAO"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="cassandraContentDAO" class="eu.europeana.cloud.service.mcs.persistent.cassandra.CassandraContentDAO"/>

    <bean id="s3ContentDAO" class="eu.europeana.cloud.service.mcs.persistent.s3.S3ContentDAO"/>
    <bean id="SimpleSwiftConnectionProvider" class="eu.europeana.cloud.service.mcs.persistent.s3.SimpleS3ConnectionProvider">
        <constructor-arg index="0" type="java.lang.String" value="transient"/>
        <constructor-arg index="1" type="java.lang.String" value="test_container"/>
        <constructor-arg index="2" type="java.lang.String" value=""/>
        <constructor-arg index="3" type="java.lang.String" value="test_user"/>
        <constructor-arg index="4" type="java.lang.String" value="test_pwd"/>
    </bean>

    <bean id="bucketsHandler" class="eu.europeana.cloud.service.commons.utils.BucketsHandler">
        <constructor-arg index="0" value="#{dbService.session}"/>
    </bean>

    <mockito:mock id="uisClientHandler" class="eu.europeana.cloud.service.mcs.UISClientHandler"/>

    <!--spy on everything-->
    <mockito:spy beanName="dbService"/>
    <mockito:spy beanName="cassandraDataSetService"/>
    <mockito:spy beanName="cassandraDataSetDAO"/>
    <mockito:spy beanName="cassandraRecordService"/>
    <mockito:spy beanName="cassandraRecordDAO"/>
    <mockito:spy beanName="s3ContentDAO"/>
    <mockito:spy beanName="SimpleSwiftConnectionProvider"/>
    <mockito:spy beanName="sorlConnector"/>

</beans>
